" Automatically generated by chef.  This file is overwritten whenever you run
" soloist_workstation.

if has("gui_macvim")
  " Map apple command-n to switch tab
  map <D-1> 1gt
  map <D-2> 2gt
  map <D-3> 3gt
  map <D-4> 4gt
  map <D-5> 5gt
  map <D-6> 6gt
  map <D-7> 7gt
  map <D-8> 8gt
  map <D-9> 9gt
  map <D-0> 10gt

  " Make command-t not open a new tab.
  macmenu &File.New\ Tab key=<nop>
  map <D-t> :CommandT<CR>
endif

" Default open all folds, effectively disabling folds for those who dislike
" them.
set foldlevel=999

" Don't show tabs (and other non-printables)
set nolist

" Make zv focus
nnoremap zv zMzv

" Make <leader>t run command-t
nmap <leader>t   :CommandTFlush<CR>:CommandT<CR>
" use <leader>B to avoid conflicts with camelcaseword; won't be necessary
" after 33965655.
nmap <leader>B   :CommandTBuffer<CR>
nmap <leader>f   :CommandTJump<CR>

" http://ctoomey.com/posts/command-t-optimized/
function! Git_Repo_Cdup() " Get the relative path to repo root
    "Ask git for the root of the git repo (as a relative '../../' path)
    let git_top = system('git rev-parse --show-cdup')
    let git_fail = 'fatal: Not a git repository'
    if strpart(git_top, 0, strlen(git_fail)) == git_fail
        " Above line says we are not in git repo. Ugly. Better version?
        return ''
    else
        " Return the cdup path to the root. If already in root,
        " path will be empty, so add './'
        return './' . git_top
    endif
endfunction

function! CD_Git_Root()
    execute 'cd '.Git_Repo_Cdup()
    let curdir = getcwd()
    echo 'CWD now set to: '.curdir
endfunction
nnoremap <LEADER>gr :call CD_Git_Root()<cr>

" Define the wildignore from gitignore. Primarily for CommandT
function! WildignoreFromGitignore()
    silent call CD_Git_Root()
    let gitignore = '.gitignore'
    if filereadable(gitignore)
        let igstring = ''
        for oline in readfile(gitignore)
            let line = substitute(oline, '\s|\n|\r', '', "g")
            if line =~ '^#' | con | endif
            if line == '' | con  | endif
            if line =~ '^!' | con  | endif
            if line =~ '/$' | let igstring .= "," . line . "*" | con | endif
            let igstring .= "," . line
        endfor
        let execstring = "set wildignore=".substitute(igstring,'^,','',"g")
        execute execstring
        echo 'Wildignore defined from gitignore in: '.getcwd()
    else
        echo 'Unable to find gitignore'
    endif
endfunction
nnoremap <LEADER>cti :call WildignoreFromGitignore()<cr>
nnoremap <LEADER>cwi :set wildignore=''<cr>:echo 'Wildignore cleared'<cr>

set wildignore=tags,**/tmp/**,**/images/**

" This variable makes your eyes bleed when you go into insert mode.
unlet g:insert_mode_background_color

" Fix pivotal's keybindings
unmap Y
nunmap <C-l>
" The default PL keybinding has kj to escape for a more 'natural' way to exit
" insert mode.
iunmap kj

" disable legacy surround binding in visual mode
vunmap s

unmap <leader>e
let g:blockle_mapping='<leader>e'


" Disable autoclose (which provides matching quotes, brackets &c.)
let g:AutoCloseOn=0


" reset vim 'workspace'
nmap <leader>R :tabdo wincmd o<CR>:tabdo enew<CR>10gt:edit /tmp/todo.markdown<CR>1gt


" This belongs in a .vim/ftplugin.
" Detect handlebars filetype by extension
au BufRead,BufNewFile *.handlebars,*.hjs,*.hjs.erb set filetype=handlebars


" vim:ft=vim:
